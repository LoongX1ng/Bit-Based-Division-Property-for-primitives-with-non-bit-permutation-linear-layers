/* This is the supporting material of the paper entitled */
/* "MILP-aided bit-based division property for primitives with non-bit-permutation linear layers". */
/* Please find the paper at https://eprint.iacr.org/2016/811.pdf. */

/* For more information, feedback or questions, please contact lingsun@mail.sdu.edu.cn. */
/* Implemented by Sun Ling, Key Laboratory of Cryptologic Technology and Information Security, */
/* Ministry of Education, Shandong University, Jinan 250100, China. */

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <fstream>
#include <string.h>
#include <math.h>

using namespace std;

const int ROUNDS=1;
const int BlockSize = 256;
const int MCInter = 507;
const int ColNum = 8;
const int ColSize = 32; //BlockSize = ColNum * ColSize
//=======================
const int TotalInter = MCInter * ColNum;
const int NumIne = 10;

string Fout_i2s(int in)
{
    string re="result";
    if (in==0)
    {
        re+="0";
    }
    else
    {
        int len=0,temp=in;
        while(temp!=0)
        {
            temp/=10;
            len++;
        }
        temp=in;
        while(len--)
        {
            re+=(int)('0'+temp/pow(10,len));
            temp=temp%(int)(pow(10,len)+0.5);
        }
    }
    re += ".lp";
    return re;
}

int INE[NumIne][9]={
    {1, 1, 1, 1, -1, -1, -1, -1, 0},
    {-2, -2, -2, -4, 1, 4, 1, -3, -7},
    {0, 0, 0, -2, -1, -1, -1, 2, -3},
    {-2, -1, -1, 0, 3, 3, 3, 2, 0},
    {1, 1, 1, 1, -2, -2, 1, -2, -1},
    {0, 0, 0, 1, 1, -1, -2, -1, -2},
    {0, -1, -1, -2, 1, 0, 1, -1, -3},
    {0, 0, 0, 0, -1, 1, -1, 1, -1},
    {0, -2, -2, 0, 1, -1, 1, 2, -3},
    {0, 0, 0, -1, 1, 1, 1, 1, 0}
};

int COLUMN[ColSize][ColSize+1]={
    {0,1,2,3,4,5,6,7,8,9,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12},
    {12,13,14,15,16,17,18,19,20,21,22,23,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13},
    {25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16},
    {41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17},
    {58,59,60,61,62,63,64,65,66,67,68,69,70,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14},
    {72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15},
    {87,88,89,90,91,92,93,94,95,96,97,98,99,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14},
    {101,102,103,104,105,106,107,108,109,110,111,112,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13},
    {114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15},
    {129,130,131,132,133,134,135,136,137,138,139,140,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13},
    {142,143,144,145,146,147,148,149,150,151,152,153,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13},
    {155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15},
    {170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16},
    {186,187,188,189,190,191,192,193,194,195,196,197,198,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14},
    {200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18},
    {218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,0,0,0,0,0,0,0,0,0,0,0,21},
    {239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18},
    {257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18},
    {275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17},
    {292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16},
    {308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18},
    {326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18},
    {344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17},
    {361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15},
    {376,377,378,379,380,381,382,383,384,385,386,387,388,389,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14},
    {390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15},
    {405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16},
    {421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18},
    {439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15},
    {454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17},
    {471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18},
    {489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18}
};

int ROW[ColSize][ColSize+1]={
    {12,87,129,186,218,257,308,361,376,405,454,471,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12},
    {25,58,101,142,170,200,275,309,326,377,390,421,439,472,489,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15},
    {0,41,59,72,114,155,171,187,219,239,292,327,344,378,391,406,455,490,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18},
    {1,73,115,172,201,220,240,345,392,422,440,456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12},
    {2,26,42,102,116,156,202,221,241,258,276,310,328,346,379,407,457,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17},
    {13,43,60,117,130,222,242,259,277,293,311,329,347,362,380,393,423,473,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18},
    {3,27,74,131,143,173,260,278,294,330,348,363,381,394,408,441,491,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17},
    {14,28,88,103,144,188,203,223,243,261,295,312,331,364,395,424,442,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17},
    {29,89,145,157,204,224,296,349,409,425,492,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11},
    {4,44,61,104,158,225,244,313,365,426,443,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11},
    {5,15,62,75,118,174,262,314,332,382,458,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11},
    {16,76,132,146,159,189,205,226,279,297,333,396,410,427,474,493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16},
    {6,77,90,119,147,175,245,280,298,350,366,397,411,428,444,459,475,494,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18},
    {17,63,91,105,120,133,160,190,263,299,367,412,429,460,476,495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16},
    {30,78,106,121,134,148,206,246,281,315,430,477,496,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13},
    {45,64,79,135,161,227,264,282,334,351,368,383,398,413,431,445,461,478,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18},
    {18,31,46,65,92,107,162,207,228,247,265,283,300,316,352,384,399,414,432,479,497,0,0,0,0,0,0,0,0,0,0,0,21},
    {32,47,80,108,122,229,266,284,301,317,335,369,400,415,433,498,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16},
    {48,66,93,136,176,285,302,318,336,353,416,434,446,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13},
    {7,19,33,49,81,94,149,163,191,208,230,248,267,286,337,370,385,401,417,462,480,499,0,0,0,0,0,0,0,0,0,0,22},
    {50,67,82,95,109,123,150,192,209,231,287,319,354,371,435,463,481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17},
    {8,83,96,110,124,137,164,210,232,249,303,338,372,386,447,482,500,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17},
    {20,97,111,125,138,151,233,250,268,320,355,402,464,501,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14},
    {34,51,68,84,98,139,165,177,193,211,234,269,339,356,418,436,448,465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18},
    {9,35,52,85,140,178,194,235,251,270,321,387,449,466,483,502,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16},
    {21,53,99,152,179,195,212,271,288,340,403,467,484,503,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14},
    {10,36,69,112,126,166,180,196,213,236,252,289,304,357,419,485,504,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17},
    {22,37,70,127,181,214,253,305,373,437,450,468,486,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13},
    {23,38,54,71,153,167,182,197,237,254,290,322,341,374,404,451,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17},
    {39,55,86,168,183,198,215,255,272,306,323,342,358,420,470,487,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16},
    {56,100,128,184,199,216,238,256,273,291,324,343,359,375,388,438,452,488,505,0,0,0,0,0,0,0,0,0,0,0,0,0,19},
    {11,24,40,57,113,141,154,169,185,217,274,307,325,360,389,453,506,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17}
};

void MC(int in[ColSize], int out[ColSize], int t[MCInter], ofstream & fout)
{
	for (int i=0;i<ColSize;i++)
	{
		fout<<"b"<<in[i];
        for (int j=0;j<(COLUMN[i][ColSize]-1);j++)
        {
        	fout<<" - t"<<t[COLUMN[i][j]];
        }
        fout<<" - t"<<t[COLUMN[i][COLUMN[i][ColSize]-1]]<<" = 0"<<"\n";
	}

	for (int i=0;i<ColSize;i++)
	{
		fout<<"t"<<t[ROW[i][0]];
		for (int j=1;j<ROW[i][ColSize];j++)
		{
			fout<<" + t"<<t[ROW[i][j]];
		}
		fout<<" - a"<<out[i]<<" = 0"<<"\n";
	}
}

void ROUND_FUNCTION(int a[BlockSize], int b[BlockSize], int t[TotalInter], ofstream & fout)
{
	for (int j=0;j<ColNum*ColNum;j++)
	{
		for (int i=0;i<NumIne;i++)
		{
			fout<<INE[i][0]<<" "<<"a"<<a[4*j]<<" + ";
            fout<<INE[i][1]<<" "<<"a"<<a[4*j+1]<<" + ";
            fout<<INE[i][2]<<" "<<"a"<<a[4*j+2]<<" + ";
            fout<<INE[i][3]<<" "<<"a"<<a[4*j+3]<<" + ";

            fout<<INE[i][4]<<" "<<"b"<<b[4*j]<<" + ";
            fout<<INE[i][5]<<" "<<"b"<<b[4*j+1]<<" + ";
            fout<<INE[i][6]<<" "<<"b"<<b[4*j+2]<<" + ";
            fout<<INE[i][7]<<" "<<"b"<<b[4*j+3];

            fout<<" >= "<<INE[i][8]<<"\n";
		}
	}
    
    int temp[BlockSize];
	for (int i=0;i<BlockSize;i++)
	{
		temp[i] = b[i];
	}

	int SR[ColNum][ColNum];
	for (int j=0;j<ColNum;j++)
	{
        for (int i=0;i<ColNum;i++)
        {
        	SR[i][j] = ColNum*j+i;
        }
	}

	int SR_Copy[ColNum][ColNum];
	for (int i=0;i<ColNum;i++)
	{
		for (int j=0;j<ColNum-i;j++)
		{
			SR_Copy[i][j] = SR[i][j+i];
		}
		for (int j=0;j<i;j++)
		{
			SR_Copy[i][j+ColNum-i] = SR[i][j];
		}
	}

	int SR_Column[ColNum*ColNum];
	for (int j=0;j<ColNum;j++)
	{
		for (int i=0;i<ColNum;i++)
		{
			SR_Column[ColNum*j+i] = SR_Copy[i][j];
		}
	}

	for (int i=0;i<ColNum*ColNum;i++)
	{
		for (int j=0;j<4;j++)
		{
			b[4*i+j] = temp[4*SR_Column[i]+j];
		}
	}

	int tin[ColSize];
	int tout[ColSize];
	int inter[MCInter];

    for (int col=0;col<ColNum;col++)
	{
		for (int i=0;i<ColSize;i++)
		{
			tin[i] = b[ColSize*col+i];
		}
		for (int i=0;i<ColSize;i++)
		{
			tout[i] = a[ColSize*col+i] + BlockSize;
		}
		for (int i=0;i<MCInter;i++)
		{
			inter[i] = t[MCInter*col+i];
		}
		MC(tin, tout, inter, fout);
	}

	/*for (int i=0;i<ColNum;i++)
	{
		for (int j=0;j<ColNum;j++)
		{
			cout<<SR[i][j]<<",";
		}
		cout<<endl;
	}
	cout<<"-----------------"<<endl;
	for (int i=0;i<ColNum;i++)
	{
		for (int j=0;j<ColNum;j++)
		{
			cout<<SR_Copy[i][j]<<",";
		}
		cout<<endl;
	}
	cout<<"-----------------"<<endl;
	for (int i=0;i<ColNum*ColNum;i++)
	{
		cout<<SR_Column[i]<<",";
	}
	cout<<endl;
	getchar();
	getchar();*/
}

int main()
{
	for (int file = 0;file<BlockSize;file++)
	{
		string outtem = Fout_i2s(file);
        const char* out_tem = outtem.c_str();
        ofstream fout(out_tem, ios::out);

        int a[BlockSize];
        int b[BlockSize];
        int t[TotalInter];
        int na=0;
        int nb=0;
        int nt=0;

        fout<<"Maximize"<<"\n";
        for (int i=BlockSize*ROUNDS;i<BlockSize*(ROUNDS+1)-1;i++)
        {
            fout<<"a"<<i<<" + ";
        }
        fout<<"a"<<BlockSize*(ROUNDS+1)-1<<"\n";
        fout<<"\n";

        fout<<"Subject to"<<"\n";

        for (int r=0;r<ROUNDS;r++)
        {
        	for (int i=0;i<BlockSize;i++)
            {
                a[i]=na++;
            }
            for (int i=0;i<BlockSize;i++)
            {
                b[i]=nb++;
            }
            for (int i=0;i<TotalInter;i++)
            {
                t[i]=nt++;
            }
            ROUND_FUNCTION(a,b,t,fout);
        }

        //========================================
        //=============================Input Division Property
        for (int i=0;i<4;i++)
        {
            fout<<"a"<<i<<" = 1"<<"\n";
        }
        for (int i=4;i<BlockSize;i++)
        {
            fout<<"a"<<i<<" = 0"<<"\n";
        }
        //=============================

        //=============================Output Division Property
        for (int i=0;i<BlockSize;i++)
        {
            if (i!=file)
            {
                fout<<"a"<<BlockSize*ROUNDS+i<<" = 0"<<"\n";
            }
            else
            {
                fout<<"a"<<BlockSize*ROUNDS+i<<" = 1"<<"\n";
            }
        }
        //=============================

        fout<<"Binary"<<"\n";
        for (int i=0;i<(na+BlockSize);i++)
        {
            fout<<"a"<<i<<" ";
        }
        for (int i=0;i<nb;i++)
        {
            fout<<"b"<<i<<" ";
        }
        for (int i=0;i<nt;i++)
        {
            fout<<"t"<<i<<" ";
        }
        fout<<"\n";
        fout<<"End"<<"\n";


        fout.close();
	}
	return 0;
}

